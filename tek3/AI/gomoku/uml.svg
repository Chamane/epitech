<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="1621px" preserveAspectRatio="none" style="width:2323px;height:1621px;" version="1.1" viewBox="0 0 2323 1621" width="2323px" zoomAndPan="magnify"><defs><filter height="300%" id="f1sb8hp5yncuz8" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--class Board--><rect fill="#FEFECE" filter="url(#f1sb8hp5yncuz8)" height="342.5078" id="Board" style="stroke: #A80036; stroke-width: 1.5;" width="401" x="1333" y="711"/><ellipse cx="1510.75" cy="727" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1513.0938,722.6719 L1513.2656,722.75 C1513.4844,722.4375 1513.6875,722.3438 1513.9844,722.3438 C1514.2813,722.3438 1514.5625,722.4844 1514.7188,722.75 C1514.8125,722.9063 1514.8281,723.0313 1514.8281,723.4688 L1514.8281,724.8906 C1514.8281,725.3125 1514.7969,725.5 1514.6875,725.6563 C1514.5156,725.875 1514.25,726.0156 1513.9844,726.0156 C1513.7656,726.0156 1513.5313,725.9063 1513.3906,725.7656 C1513.25,725.6406 1513.2188,725.5156 1513.1563,725.1094 C1513.0625,724.7031 1512.8906,724.4844 1512.4063,724.2031 C1511.9375,723.9531 1511.3281,723.7969 1510.75,723.7969 C1509.0156,723.7969 1507.7656,725.1094 1507.7656,726.8906 L1507.7656,727.9844 C1507.7656,729.6875 1509.0625,730.7813 1511.1094,730.7813 C1511.875,730.7813 1512.5625,730.6563 1512.9844,730.3906 C1513.1719,730.2969 1513.1719,730.2969 1513.625,729.8125 C1513.8125,729.625 1514.0156,729.5469 1514.2344,729.5469 C1514.7031,729.5469 1515.0938,729.9375 1515.0938,730.3906 C1515.0938,730.7813 1514.7656,731.2344 1514.1875,731.6406 C1513.4375,732.1875 1512.2813,732.4844 1511.0625,732.4844 C1508.1719,732.4844 1506.0625,730.5938 1506.0625,728.0156 L1506.0625,726.8906 C1506.0625,724.1719 1508.0625,722.0938 1510.6875,722.0938 C1511.5625,722.0938 1512.1563,722.2344 1513.0938,722.6719 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="37" x="1531.25" y="731.1543">Board</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1334" x2="1733" y1="743" y2="743"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1341" y="751.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="185" x="1353" y="757.2104">boardEvaluator : BoardEvaluator</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1341" y="764.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="1353" y="770.0151">moveGenerator : MoveGenerator</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1341" y="777.5117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="1353" y="782.8198">empty : bool</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1341" y="790.3164"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="1353" y="795.6245">size : unsigned char</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1341" y="803.1211"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="1353" y="808.4292">board : unsigned char**</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1334" x2="1733" y1="815.0234" y2="815.0234"/><ellipse cx="1344" cy="826.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="42" x="1353" y="829.2339">Board()</text><ellipse cx="1344" cy="839.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="51" x="1353" y="842.0386">~Board()</text><ellipse cx="1344" cy="852.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="1353" y="854.8433">getEvaluator() : BoardEvaluator&amp;</text><ellipse cx="1344" cy="865.3398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="222" x="1353" y="867.6479">getMoveGenerator() : MoveGenerator&amp;</text><ellipse cx="1344" cy="878.1445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="1353" y="880.4526">isEmpty() : bool</text><ellipse cx="1344" cy="890.9492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="1353" y="893.2573">isGenerated() : bool {query}</text><ellipse cx="1344" cy="903.7539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="140" x="1353" y="906.062">getNbMovesPlayed() : int</text><ellipse cx="1344" cy="916.5586" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="1353" y="918.8667">getSize() : unsigned char&amp; {query}</text><ellipse cx="1344" cy="929.3633" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="1353" y="931.6714">getBoard() : unsigned char* {query}</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1341" y="939.168"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="1353" y="944.4761">allocate(unsigned char size) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1341" y="951.9727"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="73" x="1353" y="957.2808">clean() : void</text><ellipse cx="1344" cy="967.7773" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="1353" y="970.0854">dump() : void {query}</text><ellipse cx="1344" cy="980.582" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="1353" y="982.8901">generate(unsigned char size) : void</text><ellipse cx="1344" cy="993.3867" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="375" x="1353" y="995.6948">makeMove(unsigned char x, unsigned char y, Player player) : void</text><ellipse cx="1344" cy="1006.1914" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="1353" y="1008.4995">makeMove(Move move, Player player) : void</text><ellipse cx="1344" cy="1018.9961" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="236" x="1353" y="1021.3042">setSize(const unsigned char&amp; size) : void</text><ellipse cx="1344" cy="1031.8008" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="307" x="1353" y="1034.1089">unmakeMove(unsigned char x, unsigned char y) : void</text><ellipse cx="1344" cy="1044.6055" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="181" x="1353" y="1046.9136">unmakeMove(Move move) : void</text><!--class BoardEvaluator--><rect fill="#FEFECE" filter="url(#f1sb8hp5yncuz8)" height="496.1641" id="BoardEvaluator" style="stroke: #A80036; stroke-width: 1.5;" width="943" x="634" y="1114"/><ellipse cx="1053.25" cy="1130" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1055.5938,1125.6719 L1055.7656,1125.75 C1055.9844,1125.4375 1056.1875,1125.3438 1056.4844,1125.3438 C1056.7813,1125.3438 1057.0625,1125.4844 1057.2188,1125.75 C1057.3125,1125.9063 1057.3281,1126.0313 1057.3281,1126.4688 L1057.3281,1127.8906 C1057.3281,1128.3125 1057.2969,1128.5 1057.1875,1128.6563 C1057.0156,1128.875 1056.75,1129.0156 1056.4844,1129.0156 C1056.2656,1129.0156 1056.0313,1128.9063 1055.8906,1128.7656 C1055.75,1128.6406 1055.7188,1128.5156 1055.6563,1128.1094 C1055.5625,1127.7031 1055.3906,1127.4844 1054.9063,1127.2031 C1054.4375,1126.9531 1053.8281,1126.7969 1053.25,1126.7969 C1051.5156,1126.7969 1050.2656,1128.1094 1050.2656,1129.8906 L1050.2656,1130.9844 C1050.2656,1132.6875 1051.5625,1133.7813 1053.6094,1133.7813 C1054.375,1133.7813 1055.0625,1133.6563 1055.4844,1133.3906 C1055.6719,1133.2969 1055.6719,1133.2969 1056.125,1132.8125 C1056.3125,1132.625 1056.5156,1132.5469 1056.7344,1132.5469 C1057.2031,1132.5469 1057.5938,1132.9375 1057.5938,1133.3906 C1057.5938,1133.7813 1057.2656,1134.2344 1056.6875,1134.6406 C1055.9375,1135.1875 1054.7813,1135.4844 1053.5625,1135.4844 C1050.6719,1135.4844 1048.5625,1133.5938 1048.5625,1131.0156 L1048.5625,1129.8906 C1048.5625,1127.1719 1050.5625,1125.0938 1053.1875,1125.0938 C1054.0625,1125.0938 1054.6563,1125.2344 1055.5938,1125.6719 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="96" x="1073.75" y="1134.1543">BoardEvaluator</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="635" x2="1576" y1="1146" y2="1146"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="642" y="1154.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="654" y="1160.2104">board : Board&amp;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="642" y="1167.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="504" x="654" y="1173.0151">compositePatternOccurences : std::unordered_map&lt;OrientationLine, std::vector&lt;int&gt; &gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="642" y="1180.5117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="470" x="654" y="1185.8198">patternOccurrences : std::unordered_map&lt;int, std::vector&lt;std::pair&lt;int, int&gt; &gt; &gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="642" y="1193.3164"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="300" x="654" y="1198.6245">compositePatterns : std::vector&lt;CompositePattern&gt;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="642" y="1206.1211"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="218" x="654" y="1211.4292">simplePatterns : std::vector&lt;Pattern&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="635" x2="1576" y1="1218.0234" y2="1218.0234"/><ellipse cx="645" cy="1229.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="654" y="1232.2339">BoardEvaluator(Board&amp; board)</text><ellipse cx="645" cy="1242.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="654" y="1245.0386">~BoardEvaluator()</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="642" y="1252.5352"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="464" x="654" y="1257.8433">generateMovePatterns(Move move, unsigned char stone) : MovePatterns {query}</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="642" y="1265.3398"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="389" x="654" y="1270.6479">getMovePositions(MovePatterns&amp; patterns) : MovePositions {query}</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="642" y="1278.1445"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="322" x="654" y="1283.4526">getPattern(const std::string&amp; representation) : Pattern&amp;</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="642" y="1290.9492"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="613" x="654" y="1296.2573">findCompositePattern(const MovePatterns&amp; patterns, const MovePositions&amp; positions, Player player) : bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="642" y="1303.7539"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="861" x="654" y="1309.062">hasCompositePattern(const std::string&amp; firstPattern, const std::string&amp; secondPattern, size_t firstPatternPosition, size_t secondPatternPosition) : bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="642" y="1316.5586"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="443" x="654" y="1321.8667">patternIsInvalidChild(Pattern&amp; patternData, size_t found_index) : bool {query}</text><ellipse cx="645" cy="1332.3633" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="654" y="1334.6714">evaluateBoard(int scoreFactor) : int</text><ellipse cx="645" cy="1345.168" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="267" x="654" y="1347.4761">evaluateMove(Move&amp; move, Player player) : int</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="642" y="1354.9727"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="810" x="654" y="1360.2808">getCompositePatternScore(const std::string&amp; movePattern, size_t movePosition, OrientationLine orientation, Move&amp; move, Player player) : int</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="642" y="1367.7773"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="528" x="654" y="1373.0854">getCompositePatternScores(MovePatterns&amp; movePatterns, Move&amp; move, Player player) : int</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="642" y="1380.582"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="310" x="654" y="1385.8901">getSimplePatternScore(std::string&amp; movePattern) : int</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="642" y="1393.3867"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="654" y="1398.6948">scoreColumnPatterns() : int</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="642" y="1406.1914"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="184" x="654" y="1411.4995">scoreLeftDiagonalPatterns() : int</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="642" y="1418.9961"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="395" x="654" y="1424.3042">scoreMovePatterns(MovePatterns&amp; movePatterns, Move&amp; move) : int</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="642" y="1431.8008"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="522" x="654" y="1437.1089">scoreOrientedPattern(Pattern&amp; patternData, const std::string&amp; pattern, bool reversed) : int</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="642" y="1444.6055"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="654" y="1449.9136">scorePattern(const std::string&amp; pattern) : int</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="642" y="1457.4102"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="654" y="1462.7183">scoreRightDiagonalPatterns() : int</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="642" y="1470.2148"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="654" y="1475.5229">scoreRowPatterns() : int</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="642" y="1483.0195"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="333" x="654" y="1488.3276">getMovePosition(const std::string&amp; move) : size_t {query}</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="642" y="1495.8242"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="536" x="654" y="1501.1323">getCompositePatternMoveScores(MovePatterns&amp; patterns, Move&amp; move) : std::pair&lt;int , int&gt;</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="642" y="1508.6289"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="482" x="654" y="1513.937">getSimpleMoveScore(std::pair&lt;std::string, std::string&gt;&amp; move) : std::pair&lt;int , int&gt;</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="642" y="1521.4336"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="917" x="654" y="1526.7417">generatePattern(Move move, unsigned char ownStone, char hIncrement, char vIncrement, char hDelta, char vDelta) : std::pair&lt;std::string , std::string&gt; {query}</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="642" y="1534.2383"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="177" x="654" y="1539.5464">clearPatternOccurrence() : void</text><ellipse cx="645" cy="1550.043" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="421" x="654" y="1552.3511">evaluateMoveList(std::vector&lt;MoveData&gt;&amp; moveList, Player player) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="642" y="1559.8477"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="461" x="654" y="1565.1558">replaceMoveToken(MovePatterns&amp; patterns, unsigned char token) : void {query}</text><ellipse cx="645" cy="1575.6523" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="364" x="654" y="1577.9604">sortMoveList(std::vector&lt;MoveData&gt;&amp; moveList) : void {query}</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="642" y="1585.457"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="785" x="654" y="1590.7651">updatePatterns(std::string&amp; ownPattern, std::string&amp; enemyPattern, unsigned char ownStone, unsigned char boardStone) : void {query}</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="642" y="1598.2617"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="602" x="654" y="1603.5698">updatePatterns(std::string&amp; ownPattern, std::string&amp; enemyPattern, unsigned char stone) : void {query}</text><!--class BoardEvaluator::CompositePattern--><rect fill="#FEFECE" filter="url(#f1sb8hp5yncuz8)" height="99.2188" id="BoardEvaluator::CompositePattern" style="stroke: #A80036; stroke-width: 1.5;" width="249" x="6" y="91.5"/><ellipse cx="21" cy="107.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M23.3438,103.1719 L23.5156,103.25 C23.7344,102.9375 23.9375,102.8438 24.2344,102.8438 C24.5313,102.8438 24.8125,102.9844 24.9688,103.25 C25.0625,103.4063 25.0781,103.5313 25.0781,103.9688 L25.0781,105.3906 C25.0781,105.8125 25.0469,106 24.9375,106.1563 C24.7656,106.375 24.5,106.5156 24.2344,106.5156 C24.0156,106.5156 23.7813,106.4063 23.6406,106.2656 C23.5,106.1406 23.4688,106.0156 23.4063,105.6094 C23.3125,105.2031 23.1406,104.9844 22.6563,104.7031 C22.1875,104.4531 21.5781,104.2969 21,104.2969 C19.2656,104.2969 18.0156,105.6094 18.0156,107.3906 L18.0156,108.4844 C18.0156,110.1875 19.3125,111.2813 21.3594,111.2813 C22.125,111.2813 22.8125,111.1563 23.2344,110.8906 C23.4219,110.7969 23.4219,110.7969 23.875,110.3125 C24.0625,110.125 24.2656,110.0469 24.4844,110.0469 C24.9531,110.0469 25.3438,110.4375 25.3438,110.8906 C25.3438,111.2813 25.0156,111.7344 24.4375,112.1406 C23.6875,112.6875 22.5313,112.9844 21.3125,112.9844 C18.4219,112.9844 16.3125,111.0938 16.3125,108.5156 L16.3125,107.3906 C16.3125,104.6719 18.3125,102.5938 20.9375,102.5938 C21.8125,102.5938 22.4063,102.7344 23.3438,103.1719 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="217" x="35" y="111.6543">BoardEvaluator::CompositePattern</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="254" y1="123.5" y2="123.5"/><ellipse cx="17" cy="135.4023" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="76" x="26" y="137.7104">first : Pattern</text><ellipse cx="17" cy="148.207" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="26" y="150.5151">second : Pattern</text><ellipse cx="17" cy="161.0117" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="58" x="26" y="163.3198">score : int</text><ellipse cx="17" cy="173.8164" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="199" x="26" y="176.1245">patternIndexes : std::pair&lt;int, int&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="254" y1="182.7188" y2="182.7188"/><!--class BoardEvaluator::MovePatterns--><rect fill="#FEFECE" filter="url(#f1sb8hp5yncuz8)" height="99.2188" id="BoardEvaluator::MovePatterns" style="stroke: #A80036; stroke-width: 1.5;" width="353" x="290" y="91.5"/><ellipse cx="367.25" cy="107.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M369.5938,103.1719 L369.7656,103.25 C369.9844,102.9375 370.1875,102.8438 370.4844,102.8438 C370.7813,102.8438 371.0625,102.9844 371.2188,103.25 C371.3125,103.4063 371.3281,103.5313 371.3281,103.9688 L371.3281,105.3906 C371.3281,105.8125 371.2969,106 371.1875,106.1563 C371.0156,106.375 370.75,106.5156 370.4844,106.5156 C370.2656,106.5156 370.0313,106.4063 369.8906,106.2656 C369.75,106.1406 369.7188,106.0156 369.6563,105.6094 C369.5625,105.2031 369.3906,104.9844 368.9063,104.7031 C368.4375,104.4531 367.8281,104.2969 367.25,104.2969 C365.5156,104.2969 364.2656,105.6094 364.2656,107.3906 L364.2656,108.4844 C364.2656,110.1875 365.5625,111.2813 367.6094,111.2813 C368.375,111.2813 369.0625,111.1563 369.4844,110.8906 C369.6719,110.7969 369.6719,110.7969 370.125,110.3125 C370.3125,110.125 370.5156,110.0469 370.7344,110.0469 C371.2031,110.0469 371.5938,110.4375 371.5938,110.8906 C371.5938,111.2813 371.2656,111.7344 370.6875,112.1406 C369.9375,112.6875 368.7813,112.9844 367.5625,112.9844 C364.6719,112.9844 362.5625,111.0938 362.5625,108.5156 L362.5625,107.3906 C362.5625,104.6719 364.5625,102.5938 367.1875,102.5938 C368.0625,102.5938 368.6563,102.7344 369.5938,103.1719 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="190" x="387.75" y="111.6543">BoardEvaluator::MovePatterns</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="291" x2="642" y1="123.5" y2="123.5"/><ellipse cx="301" cy="135.4023" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="307" x="310" y="137.7104">horizontalPatterns : std::pair&lt;std::string, std::string&gt;</text><ellipse cx="301" cy="148.207" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="319" x="310" y="150.5151">leftDiagonalPatterns : std::pair&lt;std::string, std::string&gt;</text><ellipse cx="301" cy="161.0117" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="327" x="310" y="163.3198">rightDiagonalPatterns : std::pair&lt;std::string, std::string&gt;</text><ellipse cx="301" cy="173.8164" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="293" x="310" y="176.1245">verticalPatterns : std::pair&lt;std::string, std::string&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="291" x2="642" y1="182.7188" y2="182.7188"/><!--class BoardEvaluator::MovePositions--><rect fill="#FEFECE" filter="url(#f1sb8hp5yncuz8)" height="99.2188" id="BoardEvaluator::MovePositions" style="stroke: #A80036; stroke-width: 1.5;" width="303" x="678" y="91.5"/><ellipse cx="728.75" cy="107.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M731.0938,103.1719 L731.2656,103.25 C731.4844,102.9375 731.6875,102.8438 731.9844,102.8438 C732.2813,102.8438 732.5625,102.9844 732.7188,103.25 C732.8125,103.4063 732.8281,103.5313 732.8281,103.9688 L732.8281,105.3906 C732.8281,105.8125 732.7969,106 732.6875,106.1563 C732.5156,106.375 732.25,106.5156 731.9844,106.5156 C731.7656,106.5156 731.5313,106.4063 731.3906,106.2656 C731.25,106.1406 731.2188,106.0156 731.1563,105.6094 C731.0625,105.2031 730.8906,104.9844 730.4063,104.7031 C729.9375,104.4531 729.3281,104.2969 728.75,104.2969 C727.0156,104.2969 725.7656,105.6094 725.7656,107.3906 L725.7656,108.4844 C725.7656,110.1875 727.0625,111.2813 729.1094,111.2813 C729.875,111.2813 730.5625,111.1563 730.9844,110.8906 C731.1719,110.7969 731.1719,110.7969 731.625,110.3125 C731.8125,110.125 732.0156,110.0469 732.2344,110.0469 C732.7031,110.0469 733.0938,110.4375 733.0938,110.8906 C733.0938,111.2813 732.7656,111.7344 732.1875,112.1406 C731.4375,112.6875 730.2813,112.9844 729.0625,112.9844 C726.1719,112.9844 724.0625,111.0938 724.0625,108.5156 L724.0625,107.3906 C724.0625,104.6719 726.0625,102.5938 728.6875,102.5938 C729.5625,102.5938 730.1563,102.7344 731.0938,103.1719 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="193" x="749.25" y="111.6543">BoardEvaluator::MovePositions</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="679" x2="980" y1="123.5" y2="123.5"/><ellipse cx="689" cy="135.4023" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="257" x="698" y="137.7104">horizontalPositions : std::pair&lt;size_t, size_t&gt;</text><ellipse cx="689" cy="148.207" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="269" x="698" y="150.5151">leftDiagonalPositions : std::pair&lt;size_t, size_t&gt;</text><ellipse cx="689" cy="161.0117" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="277" x="698" y="163.3198">rightDiagonalPositions : std::pair&lt;size_t, size_t&gt;</text><ellipse cx="689" cy="173.8164" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="243" x="698" y="176.1245">verticalPositions : std::pair&lt;size_t, size_t&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="679" x2="980" y1="182.7188" y2="182.7188"/><!--class BoardEvaluator::OrientationLine--><rect fill="#FEFECE" filter="url(#f1sb8hp5yncuz8)" height="48" id="BoardEvaluator::OrientationLine" style="stroke: #A80036; stroke-width: 1.5;" width="231" x="15" y="468.5"/><ellipse cx="30" cy="484.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M32.3438,480.1719 L32.5156,480.25 C32.7344,479.9375 32.9375,479.8438 33.2344,479.8438 C33.5313,479.8438 33.8125,479.9844 33.9688,480.25 C34.0625,480.4063 34.0781,480.5313 34.0781,480.9688 L34.0781,482.3906 C34.0781,482.8125 34.0469,483 33.9375,483.1563 C33.7656,483.375 33.5,483.5156 33.2344,483.5156 C33.0156,483.5156 32.7813,483.4063 32.6406,483.2656 C32.5,483.1406 32.4688,483.0156 32.4063,482.6094 C32.3125,482.2031 32.1406,481.9844 31.6563,481.7031 C31.1875,481.4531 30.5781,481.2969 30,481.2969 C28.2656,481.2969 27.0156,482.6094 27.0156,484.3906 L27.0156,485.4844 C27.0156,487.1875 28.3125,488.2813 30.3594,488.2813 C31.125,488.2813 31.8125,488.1563 32.2344,487.8906 C32.4219,487.7969 32.4219,487.7969 32.875,487.3125 C33.0625,487.125 33.2656,487.0469 33.4844,487.0469 C33.9531,487.0469 34.3438,487.4375 34.3438,487.8906 C34.3438,488.2813 34.0156,488.7344 33.4375,489.1406 C32.6875,489.6875 31.5313,489.9844 30.3125,489.9844 C27.4219,489.9844 25.3125,488.0938 25.3125,485.5156 L25.3125,484.3906 C25.3125,481.6719 27.3125,479.5938 29.9375,479.5938 C30.8125,479.5938 31.4063,479.7344 32.3438,480.1719 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="199" x="44" y="488.6543">BoardEvaluator::OrientationLine</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="16" x2="245" y1="500.5" y2="500.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="16" x2="245" y1="508.5" y2="508.5"/><!--class BoardEvaluator::Pattern--><rect fill="#FEFECE" filter="url(#f1sb8hp5yncuz8)" height="137.6328" id="BoardEvaluator::Pattern" style="stroke: #A80036; stroke-width: 1.5;" width="213" x="281" y="423.5"/><ellipse cx="309.5" cy="439.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M311.8438,435.1719 L312.0156,435.25 C312.2344,434.9375 312.4375,434.8438 312.7344,434.8438 C313.0313,434.8438 313.3125,434.9844 313.4688,435.25 C313.5625,435.4063 313.5781,435.5313 313.5781,435.9688 L313.5781,437.3906 C313.5781,437.8125 313.5469,438 313.4375,438.1563 C313.2656,438.375 313,438.5156 312.7344,438.5156 C312.5156,438.5156 312.2813,438.4063 312.1406,438.2656 C312,438.1406 311.9688,438.0156 311.9063,437.6094 C311.8125,437.2031 311.6406,436.9844 311.1563,436.7031 C310.6875,436.4531 310.0781,436.2969 309.5,436.2969 C307.7656,436.2969 306.5156,437.6094 306.5156,439.3906 L306.5156,440.4844 C306.5156,442.1875 307.8125,443.2813 309.8594,443.2813 C310.625,443.2813 311.3125,443.1563 311.7344,442.8906 C311.9219,442.7969 311.9219,442.7969 312.375,442.3125 C312.5625,442.125 312.7656,442.0469 312.9844,442.0469 C313.4531,442.0469 313.8438,442.4375 313.8438,442.8906 C313.8438,443.2813 313.5156,443.7344 312.9375,444.1406 C312.1875,444.6875 311.0313,444.9844 309.8125,444.9844 C306.9219,444.9844 304.8125,443.0938 304.8125,440.5156 L304.8125,439.3906 C304.8125,436.6719 306.8125,434.5938 309.4375,434.5938 C310.3125,434.5938 310.9063,434.7344 311.8438,435.1719 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="151" x="326.5" y="443.6543">BoardEvaluator::Pattern</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="282" x2="493" y1="455.5" y2="455.5"/><ellipse cx="292" cy="467.4023" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="127" x="301" y="469.7104">hasSubPatterns : bool</text><ellipse cx="292" cy="480.207" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="301" y="482.5151">reversible : bool</text><ellipse cx="292" cy="493.0117" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="36" x="301" y="495.3198">id : int</text><ellipse cx="292" cy="505.8164" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="58" x="301" y="508.1245">score : int</text><ellipse cx="292" cy="518.6211" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="155" x="301" y="520.9292">representation : std::string</text><ellipse cx="292" cy="531.4258" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="187" x="301" y="533.7339">fatherPatterns : std::vector&lt;int&gt;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="282" x2="493" y1="540.3281" y2="540.3281"/><ellipse cx="292" cy="552.2305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="301" y="554.5386">hasFathers() : bool</text><!--class Brain--><rect fill="#FEFECE" filter="url(#f1sb8hp5yncuz8)" height="150.4375" id="Brain" style="stroke: #A80036; stroke-width: 1.5;" width="576" x="1416.5" y="417.5"/><ellipse cx="1684.25" cy="433.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1686.5938,429.1719 L1686.7656,429.25 C1686.9844,428.9375 1687.1875,428.8438 1687.4844,428.8438 C1687.7813,428.8438 1688.0625,428.9844 1688.2188,429.25 C1688.3125,429.4063 1688.3281,429.5313 1688.3281,429.9688 L1688.3281,431.3906 C1688.3281,431.8125 1688.2969,432 1688.1875,432.1563 C1688.0156,432.375 1687.75,432.5156 1687.4844,432.5156 C1687.2656,432.5156 1687.0313,432.4063 1686.8906,432.2656 C1686.75,432.1406 1686.7188,432.0156 1686.6563,431.6094 C1686.5625,431.2031 1686.3906,430.9844 1685.9063,430.7031 C1685.4375,430.4531 1684.8281,430.2969 1684.25,430.2969 C1682.5156,430.2969 1681.2656,431.6094 1681.2656,433.3906 L1681.2656,434.4844 C1681.2656,436.1875 1682.5625,437.2813 1684.6094,437.2813 C1685.375,437.2813 1686.0625,437.1563 1686.4844,436.8906 C1686.6719,436.7969 1686.6719,436.7969 1687.125,436.3125 C1687.3125,436.125 1687.5156,436.0469 1687.7344,436.0469 C1688.2031,436.0469 1688.5938,436.4375 1688.5938,436.8906 C1688.5938,437.2813 1688.2656,437.7344 1687.6875,438.1406 C1686.9375,438.6875 1685.7813,438.9844 1684.5625,438.9844 C1681.6719,438.9844 1679.5625,437.0938 1679.5625,434.5156 L1679.5625,433.3906 C1679.5625,430.6719 1681.5625,428.5938 1684.1875,428.5938 C1685.0625,428.5938 1685.6563,428.7344 1686.5938,429.1719 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="32" x="1704.75" y="437.6543">Brain</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1417.5" x2="1991.5" y1="449.5" y2="449.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1424.5" y="458.4023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="89" x="1436.5" y="463.7104">board : Board&amp;</text><ellipse cx="1427.5" cy="474.207" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" text-decoration="underline" textLength="196" x="1436.5" y="476.5151">running : static std::atomic&lt;bool&gt;</text><line style="stroke: #000000; stroke-width: 1.0;" x1="1436.5" x2="1632.5" y1="478.5151" y2="478.5151"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="1417.5" x2="1991.5" y1="483.1094" y2="483.1094"/><ellipse cx="1427.5" cy="495.0117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="1436.5" y="497.3198">Brain(Board&amp; board)</text><ellipse cx="1427.5" cy="507.8164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="47" x="1436.5" y="510.1245">~Brain()</text><ellipse cx="1427.5" cy="520.6211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="1436.5" y="522.9292">getOpeningMove() : Move</text><ellipse cx="1427.5" cy="533.4258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="254" x="1436.5" y="535.7339">rootNegaMax(unsigned int maxDepth) : Move</text><ellipse cx="1427.5" cy="546.2305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="1436.5" y="548.5386">searchBestMove() : Move</text><ellipse cx="1427.5" cy="559.0352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="550" x="1436.5" y="561.3433">negaMax(unsigned int maxDepth, int alpha, int beta, int scoreFactor, MoveData&amp; moveData) : int</text><!--class CommandManager--><rect fill="#FEFECE" filter="url(#f1sb8hp5yncuz8)" height="316.8984" id="CommandManager" style="stroke: #A80036; stroke-width: 1.5;" width="485" x="825" y="334"/><ellipse cx="1004.75" cy="350" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1007.0938,345.6719 L1007.2656,345.75 C1007.4844,345.4375 1007.6875,345.3438 1007.9844,345.3438 C1008.2813,345.3438 1008.5625,345.4844 1008.7188,345.75 C1008.8125,345.9063 1008.8281,346.0313 1008.8281,346.4688 L1008.8281,347.8906 C1008.8281,348.3125 1008.7969,348.5 1008.6875,348.6563 C1008.5156,348.875 1008.25,349.0156 1007.9844,349.0156 C1007.7656,349.0156 1007.5313,348.9063 1007.3906,348.7656 C1007.25,348.6406 1007.2188,348.5156 1007.1563,348.1094 C1007.0625,347.7031 1006.8906,347.4844 1006.4063,347.2031 C1005.9375,346.9531 1005.3281,346.7969 1004.75,346.7969 C1003.0156,346.7969 1001.7656,348.1094 1001.7656,349.8906 L1001.7656,350.9844 C1001.7656,352.6875 1003.0625,353.7813 1005.1094,353.7813 C1005.875,353.7813 1006.5625,353.6563 1006.9844,353.3906 C1007.1719,353.2969 1007.1719,353.2969 1007.625,352.8125 C1007.8125,352.625 1008.0156,352.5469 1008.2344,352.5469 C1008.7031,352.5469 1009.0938,352.9375 1009.0938,353.3906 C1009.0938,353.7813 1008.7656,354.2344 1008.1875,354.6406 C1007.4375,355.1875 1006.2813,355.4844 1005.0625,355.4844 C1002.1719,355.4844 1000.0625,353.5938 1000.0625,351.0156 L1000.0625,349.8906 C1000.0625,347.1719 1002.0625,345.0938 1004.6875,345.0938 C1005.5625,345.0938 1006.1563,345.2344 1007.0938,345.6719 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="117" x="1025.25" y="354.1543">CommandManager</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="826" x2="1309" y1="366" y2="366"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="833" y="374.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="845" y="380.2104">engine : Engine&amp;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="833" y="387.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="845" y="393.0151">boardRegex : const std::regex</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="826" x2="1309" y1="399.6094" y2="399.6094"/><ellipse cx="836" cy="411.5117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="845" y="413.8198">CommandManager(Engine&amp; engine)</text><ellipse cx="836" cy="424.3164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="845" y="426.6245">~CommandManager()</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="833" y="434.1211"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="214" x="845" y="439.4292">about(const std::string&amp; value) : bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="833" y="446.9258"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="213" x="845" y="452.2339">begin(const std::string&amp; value) : bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="833" y="459.7305"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="845" y="465.0386">board(const std::string&amp; value) : bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="833" y="472.5352"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="845" y="477.8433">end(const std::string&amp; value) : bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="833" y="485.3398"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="203" x="845" y="490.6479">info(const std::string&amp; value) : bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="833" y="498.1445"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="221" x="845" y="503.4526">restart(const std::string&amp; value) : bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="833" y="510.9492"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="845" y="516.2573">start(const std::string&amp; value) : bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="833" y="523.7539"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="232" x="845" y="529.062">takeback(const std::string&amp; value) : bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="833" y="536.5586"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="205" x="845" y="541.8667">turn(const std::string&amp; value) : bool</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="833" y="549.3633"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="459" x="845" y="554.6714">&lt;bool(const std::string&amp; value) : std::vector&lt;std::pair&lt;std::regex , std::function</text><ellipse cx="836" cy="565.168" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="256" x="845" y="567.4761">parseAndRun(const std::string&amp; value) : void</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="833" y="574.9727"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="845" y="580.2808">send(const std::string&amp; value) : void</text><ellipse cx="836" cy="590.7773" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="845" y="593.0854">sendAbout() : void</text><ellipse cx="836" cy="603.582" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="245" x="845" y="605.8901">sendDebug(const std::string&amp; value) : void</text><ellipse cx="836" cy="616.3867" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="845" y="618.6948">sendError(const std::string&amp; value) : void</text><ellipse cx="836" cy="629.1914" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="845" y="631.4995">sendMove(Move move) : void</text><ellipse cx="836" cy="641.9961" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="845" y="644.3042">sendOk() : void</text><!--class Engine--><rect fill="#FEFECE" filter="url(#f1sb8hp5yncuz8)" height="265.6797" id="Engine" style="stroke: #A80036; stroke-width: 1.5;" width="288" x="1117.5" y="8"/><ellipse cx="1235.75" cy="24" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1238.0938,19.6719 L1238.2656,19.75 C1238.4844,19.4375 1238.6875,19.3438 1238.9844,19.3438 C1239.2813,19.3438 1239.5625,19.4844 1239.7188,19.75 C1239.8125,19.9063 1239.8281,20.0313 1239.8281,20.4688 L1239.8281,21.8906 C1239.8281,22.3125 1239.7969,22.5 1239.6875,22.6563 C1239.5156,22.875 1239.25,23.0156 1238.9844,23.0156 C1238.7656,23.0156 1238.5313,22.9063 1238.3906,22.7656 C1238.25,22.6406 1238.2188,22.5156 1238.1563,22.1094 C1238.0625,21.7031 1237.8906,21.4844 1237.4063,21.2031 C1236.9375,20.9531 1236.3281,20.7969 1235.75,20.7969 C1234.0156,20.7969 1232.7656,22.1094 1232.7656,23.8906 L1232.7656,24.9844 C1232.7656,26.6875 1234.0625,27.7813 1236.1094,27.7813 C1236.875,27.7813 1237.5625,27.6563 1237.9844,27.3906 C1238.1719,27.2969 1238.1719,27.2969 1238.625,26.8125 C1238.8125,26.625 1239.0156,26.5469 1239.2344,26.5469 C1239.7031,26.5469 1240.0938,26.9375 1240.0938,27.3906 C1240.0938,27.7813 1239.7656,28.2344 1239.1875,28.6406 C1238.4375,29.1875 1237.2813,29.4844 1236.0625,29.4844 C1233.1719,29.4844 1231.0625,27.5938 1231.0625,25.0156 L1231.0625,23.8906 C1231.0625,21.1719 1233.0625,19.0938 1235.6875,19.0938 C1236.5625,19.0938 1237.1563,19.2344 1238.0938,19.6719 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="43" x="1256.25" y="28.1543">Engine</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1118.5" x2="1404.5" y1="40" y2="40"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1125.5" y="48.9023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="1137.5" y="54.2104">board : Board</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1125.5" y="61.707"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="1137.5" y="67.0151">brain : Brain</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1125.5" y="74.5117"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="224" x="1137.5" y="79.8198">commandManager : CommandManager</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1125.5" y="87.3164"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="71" x="1137.5" y="92.6245">ended : bool</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1118.5" x2="1404.5" y1="99.2188" y2="99.2188"/><ellipse cx="1128.5" cy="111.1211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="46" x="1137.5" y="113.4292">Engine()</text><ellipse cx="1128.5" cy="123.9258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="55" x="1137.5" y="126.2339">~Engine()</text><ellipse cx="1128.5" cy="136.7305" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="1137.5" y="139.0386">getBoard() : Board&amp;</text><ellipse cx="1128.5" cy="149.5352" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="262" x="1137.5" y="151.8433">getCommandManager() : CommandManager&amp;</text><ellipse cx="1128.5" cy="162.3398" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="1137.5" y="164.6479">isEnded() : bool {query}</text><ellipse cx="1128.5" cy="175.1445" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="236" x="1137.5" y="177.4526">getBoardSize() : unsigned char&amp; {query}</text><ellipse cx="1128.5" cy="187.9492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="78" x="1137.5" y="190.2573">debug() : void</text><ellipse cx="1128.5" cy="200.7539" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="64" x="1137.5" y="203.062">end() : void</text><ellipse cx="1128.5" cy="213.5586" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="1137.5" y="215.8667">makeMove(Move move, Player type) : void</text><ellipse cx="1128.5" cy="226.3633" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="1137.5" y="228.6714">playTurn() : void</text><ellipse cx="1128.5" cy="239.168" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="62" x="1137.5" y="241.4761">run() : void</text><ellipse cx="1128.5" cy="251.9727" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="177" x="1137.5" y="254.2808">start(unsigned char size) : void</text><ellipse cx="1128.5" cy="264.7773" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="157" x="1137.5" y="267.0854">takeback(Move move) : void</text><!--class MoveData--><rect fill="#FEFECE" filter="url(#f1sb8hp5yncuz8)" height="86.4141" id="MoveData" style="stroke: #A80036; stroke-width: 1.5;" width="169" x="529" y="449.5"/><ellipse cx="578.25" cy="465.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M580.5938,461.1719 L580.7656,461.25 C580.9844,460.9375 581.1875,460.8438 581.4844,460.8438 C581.7813,460.8438 582.0625,460.9844 582.2188,461.25 C582.3125,461.4063 582.3281,461.5313 582.3281,461.9688 L582.3281,463.3906 C582.3281,463.8125 582.2969,464 582.1875,464.1563 C582.0156,464.375 581.75,464.5156 581.4844,464.5156 C581.2656,464.5156 581.0313,464.4063 580.8906,464.2656 C580.75,464.1406 580.7188,464.0156 580.6563,463.6094 C580.5625,463.2031 580.3906,462.9844 579.9063,462.7031 C579.4375,462.4531 578.8281,462.2969 578.25,462.2969 C576.5156,462.2969 575.2656,463.6094 575.2656,465.3906 L575.2656,466.4844 C575.2656,468.1875 576.5625,469.2813 578.6094,469.2813 C579.375,469.2813 580.0625,469.1563 580.4844,468.8906 C580.6719,468.7969 580.6719,468.7969 581.125,468.3125 C581.3125,468.125 581.5156,468.0469 581.7344,468.0469 C582.2031,468.0469 582.5938,468.4375 582.5938,468.8906 C582.5938,469.2813 582.2656,469.7344 581.6875,470.1406 C580.9375,470.6875 579.7813,470.9844 578.5625,470.9844 C575.6719,470.9844 573.5625,469.0938 573.5625,466.5156 L573.5625,465.3906 C573.5625,462.6719 575.5625,460.5938 578.1875,460.5938 C579.0625,460.5938 579.6563,460.7344 580.5938,461.1719 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="62" x="598.75" y="469.6543">MoveData</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="530" x2="697" y1="481.5" y2="481.5"/><ellipse cx="540" cy="493.4023" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="96" x="549" y="495.7104">isTerminal : bool</text><ellipse cx="540" cy="506.207" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="58" x="549" y="508.5151">score : int</text><ellipse cx="540" cy="519.0117" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="549" y="521.3198">position : unsigned short</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="530" x2="697" y1="527.9141" y2="527.9141"/><!--class MoveGenerator--><rect fill="#FEFECE" filter="url(#f1sb8hp5yncuz8)" height="124.8281" id="MoveGenerator" style="stroke: #A80036; stroke-width: 1.5;" width="700" x="1612.5" y="1299.5"/><ellipse cx="1910.25" cy="1315.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1912.5938,1311.1719 L1912.7656,1311.25 C1912.9844,1310.9375 1913.1875,1310.8438 1913.4844,1310.8438 C1913.7813,1310.8438 1914.0625,1310.9844 1914.2188,1311.25 C1914.3125,1311.4063 1914.3281,1311.5313 1914.3281,1311.9688 L1914.3281,1313.3906 C1914.3281,1313.8125 1914.2969,1314 1914.1875,1314.1563 C1914.0156,1314.375 1913.75,1314.5156 1913.4844,1314.5156 C1913.2656,1314.5156 1913.0313,1314.4063 1912.8906,1314.2656 C1912.75,1314.1406 1912.7188,1314.0156 1912.6563,1313.6094 C1912.5625,1313.2031 1912.3906,1312.9844 1911.9063,1312.7031 C1911.4375,1312.4531 1910.8281,1312.2969 1910.25,1312.2969 C1908.5156,1312.2969 1907.2656,1313.6094 1907.2656,1315.3906 L1907.2656,1316.4844 C1907.2656,1318.1875 1908.5625,1319.2813 1910.6094,1319.2813 C1911.375,1319.2813 1912.0625,1319.1563 1912.4844,1318.8906 C1912.6719,1318.7969 1912.6719,1318.7969 1913.125,1318.3125 C1913.3125,1318.125 1913.5156,1318.0469 1913.7344,1318.0469 C1914.2031,1318.0469 1914.5938,1318.4375 1914.5938,1318.8906 C1914.5938,1319.2813 1914.2656,1319.7344 1913.6875,1320.1406 C1912.9375,1320.6875 1911.7813,1320.9844 1910.5625,1320.9844 C1907.6719,1320.9844 1905.5625,1319.0938 1905.5625,1316.5156 L1905.5625,1315.3906 C1905.5625,1312.6719 1907.5625,1310.5938 1910.1875,1310.5938 C1911.0625,1310.5938 1911.6563,1310.7344 1912.5938,1311.1719 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="96" x="1930.75" y="1319.6543">MoveGenerator</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1613.5" x2="2311.5" y1="1331.5" y2="1331.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1620.5" y="1340.4023"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="1632.5" y="1345.7104">board : const Board&amp;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1613.5" x2="2311.5" y1="1352.3047" y2="1352.3047"/><ellipse cx="1623.5" cy="1364.207" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="211" x="1632.5" y="1366.5151">MoveGenerator(const Board&amp; board)</text><ellipse cx="1623.5" cy="1377.0117" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="1632.5" y="1379.3198">~MoveGenerator()</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1620.5" y="1386.8164"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="674" x="1632.5" y="1392.1245">hasNeighbor(unsigned char** boardTable, unsigned char boardSize, unsigned char x, unsigned char y) : bool {query}</text><ellipse cx="1623.5" cy="1402.6211" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="304" x="1632.5" y="1404.9292">generateMoveList() : std::vector&lt;MoveData&gt; {query}</text><ellipse cx="1623.5" cy="1415.4258" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="430" x="1632.5" y="1417.7339">applyLateMoveReduction(std::vector&lt;MoveData&gt;&amp; moveList) : void {query}</text><!--class Player--><rect fill="#FEFECE" filter="url(#f1sb8hp5yncuz8)" height="48" id="Player" style="stroke: #A80036; stroke-width: 1.5;" width="70" x="95.5" y="858.5"/><ellipse cx="110.5" cy="874.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M112.8438,870.1719 L113.0156,870.25 C113.2344,869.9375 113.4375,869.8438 113.7344,869.8438 C114.0313,869.8438 114.3125,869.9844 114.4688,870.25 C114.5625,870.4063 114.5781,870.5313 114.5781,870.9688 L114.5781,872.3906 C114.5781,872.8125 114.5469,873 114.4375,873.1563 C114.2656,873.375 114,873.5156 113.7344,873.5156 C113.5156,873.5156 113.2813,873.4063 113.1406,873.2656 C113,873.1406 112.9688,873.0156 112.9063,872.6094 C112.8125,872.2031 112.6406,871.9844 112.1563,871.7031 C111.6875,871.4531 111.0781,871.2969 110.5,871.2969 C108.7656,871.2969 107.5156,872.6094 107.5156,874.3906 L107.5156,875.4844 C107.5156,877.1875 108.8125,878.2813 110.8594,878.2813 C111.625,878.2813 112.3125,878.1563 112.7344,877.8906 C112.9219,877.7969 112.9219,877.7969 113.375,877.3125 C113.5625,877.125 113.7656,877.0469 113.9844,877.0469 C114.4531,877.0469 114.8438,877.4375 114.8438,877.8906 C114.8438,878.2813 114.5156,878.7344 113.9375,879.1406 C113.1875,879.6875 112.0313,879.9844 110.8125,879.9844 C107.9219,879.9844 105.8125,878.0938 105.8125,875.5156 L105.8125,874.3906 C105.8125,871.6719 107.8125,869.5938 110.4375,869.5938 C111.3125,869.5938 111.9063,869.7344 112.8438,870.1719 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="38" x="124.5" y="878.6543">Player</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="96.5" x2="164.5" y1="890.5" y2="890.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="96.5" x2="164.5" y1="898.5" y2="898.5"/><!--class ScoreFactor--><rect fill="#FEFECE" filter="url(#f1sb8hp5yncuz8)" height="48" id="ScoreFactor" style="stroke: #A80036; stroke-width: 1.5;" width="108" x="200.5" y="858.5"/><ellipse cx="215.5" cy="874.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M217.8438,870.1719 L218.0156,870.25 C218.2344,869.9375 218.4375,869.8438 218.7344,869.8438 C219.0313,869.8438 219.3125,869.9844 219.4688,870.25 C219.5625,870.4063 219.5781,870.5313 219.5781,870.9688 L219.5781,872.3906 C219.5781,872.8125 219.5469,873 219.4375,873.1563 C219.2656,873.375 219,873.5156 218.7344,873.5156 C218.5156,873.5156 218.2813,873.4063 218.1406,873.2656 C218,873.1406 217.9688,873.0156 217.9063,872.6094 C217.8125,872.2031 217.6406,871.9844 217.1563,871.7031 C216.6875,871.4531 216.0781,871.2969 215.5,871.2969 C213.7656,871.2969 212.5156,872.6094 212.5156,874.3906 L212.5156,875.4844 C212.5156,877.1875 213.8125,878.2813 215.8594,878.2813 C216.625,878.2813 217.3125,878.1563 217.7344,877.8906 C217.9219,877.7969 217.9219,877.7969 218.375,877.3125 C218.5625,877.125 218.7656,877.0469 218.9844,877.0469 C219.4531,877.0469 219.8438,877.4375 219.8438,877.8906 C219.8438,878.2813 219.5156,878.7344 218.9375,879.1406 C218.1875,879.6875 217.0313,879.9844 215.8125,879.9844 C212.9219,879.9844 210.8125,878.0938 210.8125,875.5156 L210.8125,874.3906 C210.8125,871.6719 212.8125,869.5938 215.4375,869.5938 C216.3125,869.5938 216.9063,869.7344 217.8438,870.1719 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="76" x="229.5" y="878.6543">ScoreFactor</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="201.5" x2="307.5" y1="890.5" y2="890.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="201.5" x2="307.5" y1="898.5" y2="898.5"/><!--link Board to BoardEvaluator--><path d="M1359.06,1064.266 C1344.31,1080.512 1329.29,1097.139 1314.31,1113.821 " fill="none" id="Board-BoardEvaluator" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="1368.21,1054.203,1361.2135,1055.9492,1360.1344,1063.0791,1367.1309,1061.3329,1368.21,1054.203" style="stroke: #A80036; stroke-width: 1.0;"/><!--link BoardEvaluator to Board--><path d="M1349.4,1103.916 C1364.4,1087.111 1379.19,1070.428 1393.49,1054.203 " fill="none" id="BoardEvaluator-Board" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="1340.55,1113.821,1347.5312,1112.0148,1348.5491,1104.8759,1341.5679,1106.6821,1340.55,1113.821" style="stroke: #A80036; stroke-width: 1.0;"/><!--link Board to MoveGenerator--><path d="M1683.27,1064.013 C1756.85,1147.024 1841.59,1240.037 1898.35,1299.489 " fill="none" id="Board-MoveGenerator" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="1674.59,1054.203,1675.5746,1061.3466,1682.5474,1063.1852,1681.5628,1056.0417,1674.59,1054.203" style="stroke: #A80036; stroke-width: 1.0;"/><!--link MoveGenerator to Board--><path d="M1908.16,1289.416 C1855.66,1227.374 1773.77,1135.102 1699.86,1054.203 " fill="none" id="MoveGenerator-Board" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="1916.65,1299.489,1915.8431,1292.3232,1908.9181,1290.312,1909.725,1297.4778,1916.65,1299.489" style="stroke: #A80036; stroke-width: 1.0;"/><!--link Brain to Board--><path d="M1666.45,579.84 C1649.39,618.539 1628.65,665.596 1608.68,710.922 " fill="none" id="Brain-Board" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="1671.73,567.85,1665.6487,571.7253,1666.887,578.8293,1672.9683,574.954,1671.73,567.85" style="stroke: #A80036; stroke-width: 1.0;"/><!--link CommandManager to Engine--><path d="M1174.98,322.18 C1183.97,306.04 1192.85,289.84 1201.29,274.13 " fill="none" id="CommandManager-Engine" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="1168.42,333.91,1174.8396,330.6254,1174.2768,323.4363,1167.8572,326.7209,1168.42,333.91" style="stroke: #A80036; stroke-width: 1.0;"/><!--link Engine to CommandManager--><path d="M1169.19,285.65 C1160.17,301.57 1151.1,317.84 1142.28,333.91 " fill="none" id="Engine-CommandManager" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="1175.75,274.13,1169.3046,277.3637,1169.8106,284.557,1176.256,281.3233,1175.75,274.13" style="stroke: #A80036; stroke-width: 1.0;"/><!--link Engine to Board--><path d="M1313.17,286.79 C1318.26,302.65 1323.15,318.61 1327.5,334 C1366.81,472.93 1345.61,516.66 1398.5,651 C1406.32,670.85 1415.68,691.008 1425.79,710.724 " fill="none" id="Engine-Board" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="1309.05,274.12,1307.1044,281.0637,1312.7656,285.5303,1314.7112,278.5866,1309.05,274.12" style="stroke: #A80036; stroke-width: 1.0;"/><!--link Engine to Brain--><path d="M1415.97,263.87 C1480.84,315.05 1554.18,372.9 1610.68,417.48 " fill="none" id="Engine-Brain" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="1405.64,255.71,1407.8735,262.5665,1415.0616,263.1419,1412.8281,256.2854,1405.64,255.71" style="stroke: #A80036; stroke-width: 1.0;"/><!--link BoardEvaluator::CompositePattern to BoardEvaluator::MovePatterns--><!--link BoardEvaluator::MovePatterns to BoardEvaluator::MovePositions--><!--link BoardEvaluator::CompositePattern to BoardEvaluator::OrientationLine--><!--link BoardEvaluator::OrientationLine to BoardEvaluator::Pattern--><!--link BoardEvaluator::Pattern to MoveData--><!--link BoardEvaluator::OrientationLine to Player--><!--link Player to ScoreFactor--><!--
@startuml
class Board {
	+Board()
	+~Board()
	-boardEvaluator : BoardEvaluator
	+getEvaluator() : BoardEvaluator&
	-moveGenerator : MoveGenerator
	+getMoveGenerator() : MoveGenerator&
	-empty : bool
	+isEmpty() : bool
	+isGenerated() : bool {query}
	+getNbMovesPlayed() : int
	-size : unsigned char
	+getSize() : unsigned char& {query}
	+getBoard() : unsigned char* {query}
	-board : unsigned char**
	-allocate(unsigned char size) : void
	-clean() : void
	+dump() : void {query}
	+generate(unsigned char size) : void
	+makeMove(unsigned char x, unsigned char y, Player player) : void
	+makeMove(Move move, Player player) : void
	+setSize(const unsigned char& size) : void
	+unmakeMove(unsigned char x, unsigned char y) : void
	+unmakeMove(Move move) : void
}

class BoardEvaluator {
	+BoardEvaluator(Board& board)
	+~BoardEvaluator()
	-board : Board&
	-generateMovePatterns(Move move, unsigned char stone) : MovePatterns {query}
	-getMovePositions(MovePatterns& patterns) : MovePositions {query}
	-getPattern(const std::string& representation) : Pattern&
	-findCompositePattern(const MovePatterns& patterns, const MovePositions& positions, Player player) : bool
	-hasCompositePattern(const std::string& firstPattern, const std::string& secondPattern, size_t firstPatternPosition, size_t secondPatternPosition) : bool
	-patternIsInvalidChild(Pattern& patternData, size_t found_index) : bool {query}
	+evaluateBoard(int scoreFactor) : int
	+evaluateMove(Move& move, Player player) : int
	-getCompositePatternScore(const std::string& movePattern, size_t movePosition, OrientationLine orientation, Move& move, Player player) : int
	-getCompositePatternScores(MovePatterns& movePatterns, Move& move, Player player) : int
	-getSimplePatternScore(std::string& movePattern) : int
	-scoreColumnPatterns() : int
	-scoreLeftDiagonalPatterns() : int
	-scoreMovePatterns(MovePatterns& movePatterns, Move& move) : int
	-scoreOrientedPattern(Pattern& patternData, const std::string& pattern, bool reversed) : int
	-scorePattern(const std::string& pattern) : int
	-scoreRightDiagonalPatterns() : int
	-scoreRowPatterns() : int
	-getMovePosition(const std::string& move) : size_t {query}
	-getCompositePatternMoveScores(MovePatterns& patterns, Move& move) : std::pair<int , int>
	-getSimpleMoveScore(std::pair<std::string, std::string>& move) : std::pair<int , int>
	-generatePattern(Move move, unsigned char ownStone, char hIncrement, char vIncrement, char hDelta, char vDelta) : std::pair<std::string , std::string> {query}
	-compositePatternOccurences : std::unordered_map<OrientationLine, std::vector<int> >
	-patternOccurrences : std::unordered_map<int, std::vector<std::pair<int, int> > >
	-compositePatterns : std::vector<CompositePattern>
	-simplePatterns : std::vector<Pattern>
	-clearPatternOccurrence() : void
	+evaluateMoveList(std::vector<MoveData>& moveList, Player player) : void
	-replaceMoveToken(MovePatterns& patterns, unsigned char token) : void {query}
	+sortMoveList(std::vector<MoveData>& moveList) : void {query}
	-updatePatterns(std::string& ownPattern, std::string& enemyPattern, unsigned char ownStone, unsigned char boardStone) : void {query}
	-updatePatterns(std::string& ownPattern, std::string& enemyPattern, unsigned char stone) : void {query}
}

class BoardEvaluator::CompositePattern {
	+first : Pattern
	+second : Pattern
	+score : int
	+patternIndexes : std::pair<int, int>
}

class BoardEvaluator::MovePatterns {
	+horizontalPatterns : std::pair<std::string, std::string>
	+leftDiagonalPatterns : std::pair<std::string, std::string>
	+rightDiagonalPatterns : std::pair<std::string, std::string>
	+verticalPatterns : std::pair<std::string, std::string>
}

class BoardEvaluator::MovePositions {
	+horizontalPositions : std::pair<size_t, size_t>
	+leftDiagonalPositions : std::pair<size_t, size_t>
	+rightDiagonalPositions : std::pair<size_t, size_t>
	+verticalPositions : std::pair<size_t, size_t>
}

class BoardEvaluator::OrientationLine {
}

class BoardEvaluator::Pattern {
	+hasFathers() : bool
	+hasSubPatterns : bool
	+reversible : bool
	+id : int
	+score : int
	+representation : std::string
	+fatherPatterns : std::vector<int>
}

class Brain {
	+Brain(Board& board)
	+~Brain()
	-board : Board&
	+getOpeningMove() : Move
	+rootNegaMax(unsigned int maxDepth) : Move
	+searchBestMove() : Move
	+negaMax(unsigned int maxDepth, int alpha, int beta, int scoreFactor, MoveData& moveData) : int
	+{static} running : static std::atomic<bool>
}

class CommandManager {
	+CommandManager(Engine& engine)
	+~CommandManager()
	-engine : Engine&
	-about(const std::string& value) : bool
	-begin(const std::string& value) : bool
	-board(const std::string& value) : bool
	-end(const std::string& value) : bool
	-info(const std::string& value) : bool
	-restart(const std::string& value) : bool
	-start(const std::string& value) : bool
	-takeback(const std::string& value) : bool
	-turn(const std::string& value) : bool
	-boardRegex : const std::regex
	-<bool(const std::string& value) : std::vector<std::pair<std::regex , std::function
	+parseAndRun(const std::string& value) : void
	-send(const std::string& value) : void
	+sendAbout() : void
	+sendDebug(const std::string& value) : void
	+sendError(const std::string& value) : void
	+sendMove(Move move) : void
	+sendOk() : void
}

class Engine {
	+Engine()
	+~Engine()
	-board : Board
	+getBoard() : Board&
	-brain : Brain
	-commandManager : CommandManager
	+getCommandManager() : CommandManager&
	-ended : bool
	+isEnded() : bool {query}
	+getBoardSize() : unsigned char& {query}
	+debug() : void
	+end() : void
	+makeMove(Move move, Player type) : void
	+playTurn() : void
	+run() : void
	+start(unsigned char size) : void
	+takeback(Move move) : void
}

class MoveData {
	+isTerminal : bool
	+score : int
	+position : unsigned short
}

class MoveGenerator {
	+MoveGenerator(const Board& board)
	+~MoveGenerator()
	-hasNeighbor(unsigned char** boardTable, unsigned char boardSize, unsigned char x, unsigned char y) : bool {query}
	-board : const Board&
	+generateMoveList() : std::vector<MoveData> {query}
	+applyLateMoveReduction(std::vector<MoveData>& moveList) : void {query}
}

class Player {
}

class ScoreFactor {
}

Board o- - BoardEvaluator
Board o- - MoveGenerator
BoardEvaluator o- - Board
Brain o- - Board
CommandManager o- - Engine
Engine o- - Board
Engine o- - Brain
Engine o- - CommandManager
MoveGenerator o- - Board
@enduml

PlantUML version 1.2017.20beta4(Unknown compile time)
(GPL source distribution)
Java Runtime: Java(TM) SE Runtime Environment
JVM: Java HotSpot(TM) 64-Bit Server VM
Java Version: 1.7.0_25-b15
Operating System: Linux
Default Encoding: UTF-8
Language: en
Country: US
--></g></svg>